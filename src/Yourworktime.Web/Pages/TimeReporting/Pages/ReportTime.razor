@page "/reporttime"
@attribute [Authorize]
@inject Yourworktime.Core.ServerHandler serverHandler

<div class="mr-5">
    <div class="bg-white d-flex justify-content-start">
        <div class="p-2 m-2 border-right">Report Time</div>
        <div class="p-2 m-2 text-decoration-underline">Day</div>
        <div class="p-2 m-2">Week</div>
        <div class="p-2 m-2">Month</div>
    </div>
</div>

<div class="container d-flex justify-content-center ">
    <div class="input-group mb-3 p-5">
        <input type="text" class="form-control" placeholder="What are you working on?" @bind="reportimemodel.Task"  @bind:event="oninput" aria-label="Recipient's username" aria-describedby="basic-addon2">
        <div>
            <a class="btn border" role="button" id="dropdownMenuLink" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                <img src="/icons/folder.svg">
                <span>@reportimemodel.Project</span>
            </a>
            <div class="dropdown-menu" aria-labelledby="dropdownMenuLink">
                @foreach (var project in ProjectsList)
                {
                    <button type="button" @onclick="() => SelectedProject(project)" class="dropdown-item">@project</button>
                }
            </div>
        </div>

        <div>
            <a class="btn border" role="button" id="dropdownMenuLink" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                <img src="/icons/tag.svg">
                <span>@reportimemodel.Tag</span>
            </a>
            <div class="dropdown-menu" aria-labelledby="dropdownMenuLink">
                @foreach (var tag in TagsList)
                {
                    <button type="button" @onclick="() => SelectedTag(tag)" class="dropdown-item">@tag</button>
                }
            </div>
        </div>


        <button type="button" class="btn border">
            $
        </button>
        <div class="input-group-append">
            <span class="input-group-text" id="basic-addon2">@TimerOutput</span>
        </div>
        <div>
            <button type="button" class="btn @buttonColor" @onclick="OnToggleClick">@buttonName</button>
        </div>
    </div>
</div>

<div class="container">
    <div class="border bg-dark-blue p-3 text-white d-flex">
        <button type="button" class="btn">
            <img src="/icons/calendar3.svg">
        </button>
        <button type="button" class="btn">
            <img src="/icons/caret-left-fill.svg">
        </button>
        <button type="button" class="btn">
            <img src="/icons/caret-right-fill.svg">
        </button>
        <span class="p2 align-self-center">@DateTime.Today.ToString("dddd, dd MMM") (Today)</span>
        <span class="ml-auto mr-5 align-self-center">Total: @TotalTime</span>
    </div>
    <table class="table table-light">
        <thead class="thead-dark">
            <tr>
                <th scope="col">Tasks</th>
                <th scope="col">Project</th>
                <th scope="col">Tag</th>
                <th scope="col">Time</th>
                <th scope="col">Duration</th>
                <th scope="col"></th>
            </tr>
        </thead>
        @foreach (var report in ReportList)
        {
            <tbody>
                <tr>
                    <th scope="row">@report.Task</th>
                    <td>@report.Project</td>
                    <td>@report.Tag</td>
                    <td>@report.StartTime.ToString("HH:mm:ss") - @report.EndTime.ToString("HH:mm:ss")</td>
                    <td>@(String.Format("{0}:{1}:{2}", report.Duration.Hours, report.Duration.Minutes, report.Duration.Seconds))</td>
                    <td>
                        <div>
                            <button type="button" class="btn btn-filled-light-blue">Start</button>
                            <a type="button" class="text-black-50 ml-3" @onclick="() => DeletedReportFromList(report)">
                                <img src="/icons/close.svg" />
                            </a>
                        </div>
                    </td>
                </tr>
            </tbody>
        }

    </table>
</div>
@code {

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    private Guid userId;

    public static string TimerOutput { get; set; }

    public List<ReportTimeModel> ReportList = new List<ReportTimeModel>();

    public static double TotalTime { get; set; }

    private ReportTimeModel reportimemodel = new ReportTimeModel();


    #region timer vars
    private static System.Timers.Timer timer;
    private int h, m, s;
    #endregion

    #region button vars
    private string buttonColor = "btn-filled-light-blue";
    private string buttonName = "Start";
    #endregion

    #region timer functions
    public void OnToggleClick()
    {
        if (buttonName == "Start")
        {
            StartTimer();
        }
        else
        {
            StopTimer();
        }
    }

    public void StartTimer()
    {
        timer.Start();
        buttonColor = "btn-danger";
        buttonName = "Stop";

        reportimemodel.StartTime = DateTime.Now;
        reportimemodel.CreationDate = DateTime.Now.Date;
    }

    public async void StopTimer()
    {
        timer.Stop();
        buttonColor = "btn-filled-light-blue";
        buttonName = "Start";
        reportimemodel.EndTime = DateTime.Now;
        reportimemodel.Duration = reportimemodel.EndTime.Subtract(reportimemodel.StartTime);
        var model = new Core.Models.ReportTimeModel() {
            CreationDate = reportimemodel.CreationDate,
            Duration = reportimemodel.Duration,
            StartTime = reportimemodel.StartTime,
            EndTime = reportimemodel.EndTime,
            Project = reportimemodel.Project,
            Tag = reportimemodel.Tag,
            Task = reportimemodel.Task,
            Owner = userId,
            Id = new Guid()
        };
        ReportList.Add(reportimemodel);
        await serverHandler.ReportTimeService.InsertReport(model);

        s = 0;
        m = 0;
        h = 0;
        TimerOutput = "00:00:00";
        reportimemodel = new ReportTimeModel();
    }

    protected override async Task OnInitializedAsync()
    {
        var authState = await authenticationStateTask;
        var userIdClaim = authState.User.Claims.First(x => x.Type == System.IdentityModel.Tokens.Jwt.JwtRegisteredClaimNames.NameId);

        userId = new Guid(userIdClaim.Value);

        TimerOutput = "00:00:00";
        timer = new Timer();
        timer.Interval = 1000;
        timer.Elapsed += async (sender, args) =>
        {
            await InvokeAsync(() =>
            {
                IncreamentCount();
                StateHasChanged();
            });
        };

        foreach (var item in await serverHandler.ReportTimeService.LoadReportsFromUserId(userId))
        {
            ReportList.Add(item);
        }
    }

    private void IncreamentCount()
    {
        s += 1;
        if (s == 60)
        {
            s = 0;
            m += 1;

        }
        if (m == 60)
        {
            m = 0;
            h += 1;
        }
        TimerOutput = string.Format("{0}:{1}:{2}", h.ToString().PadLeft(2, '0'), m.ToString().PadLeft(2, '0'), s.ToString().PadLeft(2, '0'));
    }
    #endregion

    public List<string> ProjectsList = new List<string>
    (
        new string[] {
            "Marketing",
            "Design",
            "Production" }
    );

    public List<string> TagsList = new List<string>
    (
    new string[] {
            "Main",
            "Business",
            "Classfied" }
    );

    public void SelectedProject(string project)
    {
        reportimemodel.Project = project;
    }

    public void SelectedTag(string tag)
    {
        reportimemodel.Tag = tag;
    }

    public async void DeletedReportFromList(ReportTimeModel report)
    {
        if (report == null)
            return;

        ReportList.Remove(report);

        await serverHandler.ReportTimeService.DeleteReport(report.Id);
    }

}
