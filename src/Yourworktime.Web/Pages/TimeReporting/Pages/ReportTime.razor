@page "/reporttime"
@attribute [Authorize]


<div class="mr-5">
    <div class="bg-white d-flex justify-content-start">
        <div class="p-2 m-2 border-right">Report Time</div>
        <div class="p-2 m-2 text-decoration-underline">Day</div>
        <div class="p-2 m-2">Week</div>
        <div class="p-2 m-2">Month</div>
        <div class="p-2 m-2">Year</div>
    </div>
</div>

<div class="container d-flex justify-content-center ">
    <div class="input-group mb-3 p-5">
        <input type="text" class="form-control" placeholder="What are you working on?" @bind="_Task"  @bind:event="oninput" aria-label="Recipient's username" aria-describedby="basic-addon2">
        <div>
            <a class="btn border" role="button" id="dropdownMenuLink" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                <img src="/icons/folder.svg">
            </a>
            <div class="dropdown-menu" aria-labelledby="dropdownMenuLink">
                @foreach (var project in ProjectsList)
                {
                    <button type="button" @onclick="() => SelectedProject(project)" class="dropdown-item">@project</button>
                }
            </div>
        </div>

        <div>
            <a class="btn border" role="button" id="dropdownMenuLink" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                <img src="/icons/tag.svg">
            </a>
            <div class="dropdown-menu" aria-labelledby="dropdownMenuLink">
                @foreach (var tag in TagsList)
                {
                    <button type="button" @onclick="() => SelectedTag(tag)" class="dropdown-item">@tag</button>
                }
            </div>
        </div>


        <button type="button" class="btn border">
            $
        </button>
        <div class="input-group-append">
            <span class="input-group-text" id="basic-addon2">@_TimerOutput</span>
        </div>
        <div>
            <button type="button" class="btn @buttonColor" @onclick="OnToggleClick">@buttonName</button>
        </div>
    </div>
</div>

<div class="container">
    <div class="border bg-dark-blue p-3 text-white d-flex">
        <button type="button" class="btn">
            <img src="/icons/calendar3.svg">
        </button>
        <button type="button" class="btn">
            <img src="/icons/caret-left-fill.svg">
        </button>
        <button type="button" class="btn">
            <img src="/icons/caret-right-fill.svg">
        </button>
        <span class="p2 align-self-center">Wednesday, 23 Sep (Today)</span>
        <span class="ml-auto mr-5 align-self-center">Total: @TotalTime</span>
    </div>
    <table class="table table-light">
        <thead class="thead-dark">
            <tr>
                <th scope="col">Tasks</th>
                <th scope="col">Project</th>
                <th scope="col">Tag</th>
                <th scope="col">Time</th>
                <th scope="col">Duration</th>
                <th scope="col"></th>
            </tr>
        </thead>
        @foreach (var report in ReportList)
        {
            <tbody>
                <tr>
                    <th scope="row">@report.Task</th>
                    <td>@report.Project</td>
                    <td>@report.Tag</td>
                    <td>@report.StartTime - @report.EndTime</td>
                    <td>@report.Duration</td>
                    <td>
                        <div>
                            <button type="button" class="btn btn-filled-light-blue">Start</button>
                        </div>
                    </td>
                </tr>
            </tbody>
        }

    </table>
</div>
@code {

    public static string _TimerOutput { get; set; }

    public static string _Task { get; set; }

    public static string _Project { get; set; }

    public static string _Tag { get; set; }

    public static DateTime _StartTime { get; set; }

    public static DateTime _EndTime { get; set; }

    public static DateTime _CreationDate { get; set; }

    public List<ReportTimeModel> ReportList = new List<ReportTimeModel>();

    public static double TotalTime { get; set; }


    #region timer vars
    private static System.Timers.Timer timer;
    private int h, m, s;
    #endregion

    #region button vars
    private string buttonColor = "btn-filled-light-blue";
    private string buttonName = "Start";
    #endregion

    #region timer functions
    public void OnToggleClick()
    {
        if (buttonName == "Start")
        {
            StartTimer();
        }
        else
        {
            StopTimer();
        }
    }

    public void StartTimer()
    {
        timer.Start();
        buttonColor = "btn-danger";
        buttonName = "Stop";

        _StartTime = DateTime.Now;
        _CreationDate = DateTime.UtcNow.Date;
    }

    public void StopTimer()
    {
        timer.Stop();
        buttonColor = "btn-filled-light-blue";
        buttonName = "Start";
        _EndTime = DateTime.Now;
        ReportList.Add(new ReportTimeModel
        {
            Task = _Task,
            Project = _Project,
            Tag = _Tag,
            StartTime = _StartTime.ToString("HH:mm:ss"),
            EndTime = _EndTime.ToString("HH:mm:ss"),
            Duration = (String.Format("{0}:{1}:{2}", _EndTime.Subtract(_StartTime).Hours, _EndTime.Subtract(_StartTime).Minutes, _EndTime.Subtract(_StartTime).Seconds)),
            CreationDate = _CreationDate
        });
        s = 0;
        m = 0;
        h = 0;
        _TimerOutput = "00:00:00";
        _Task = "";

        //foreach (var report in ReportList)
        //{
        //    DateTime totalTime;

        //    totalTime = Convert.ToDateTime(report.Duration);
        //    TotalTime += Convert.ToDouble(totalTime);
        //}
    }

    protected override void OnInitialized()
    {
        _TimerOutput = "00:00:00";
        timer = new Timer();
        timer.Interval = 1000;
        timer.Elapsed += async (sender, args) =>
        {
            await InvokeAsync(() =>
            {
                IncreamentCount();
                StateHasChanged();
            });
        };
    }

    private void IncreamentCount()
    {
        s += 1;
        if (s == 60)
        {
            s = 0;
            m += 1;

        }
        if (m == 60)
        {
            m = 0;
            h += 1;
        }
        _TimerOutput = string.Format("{0}:{1}:{2}", h.ToString().PadLeft(2, '0'), m.ToString().PadLeft(2, '0'), s.ToString().PadLeft(2, '0'));
    }
    #endregion

    public List<string> ProjectsList = new List<string>
    (
        new string[] {
            "Marketing",
            "Design",
            "Production" }
    );

    public List<string> TagsList = new List<string>
    (
    new string[] {
            "Main",
            "Business",
            "Classfied" }
    );

    public void SelectedProject(string project)
    {
        _Project = project;
    }

    public void SelectedTag(string tag)
    {
        _Tag = tag;
    }



}

